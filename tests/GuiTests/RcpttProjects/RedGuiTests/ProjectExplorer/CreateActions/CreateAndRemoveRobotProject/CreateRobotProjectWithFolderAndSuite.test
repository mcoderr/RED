--- RCPTT testcase ---
Format-Version: 1.0
Contexts: _r8IlkCsHEeW667Afdo4DcA
Element-Name: CreateRobotProjectWithFolderAndSuite
Element-Type: testcase
Element-Version: 3.0
External-Reference: 
Id: _kmM50CsHEeW667Afdo4DcA
Runtime-Version: 2.2.0.201706152316
Save-Time: 6/5/18 5:12 PM
Tags: Quick
Testcase-Type: ecl
Verifications: _Xbz7EJUqEeaXOtocAkFx_w

------=_.content-0a7243a0-75d3-3d5f-9791-539de0e5b7ac
Content-Type: text/ecl
Entry-Name: .content

//check list of manu "Project/New"
proc "compare-items" [val item_amount] [val ref_list_of_items] {
	repeat [val index] -times $item_amount  -command
	{
		get-menu "File/New"|  get-object  | invoke getMenu  | invoke getItem $index | invoke toString | let [val item_from_menu -input]{	
			$item_from_menu | equals [ $ref_list_of_items| get $index]
				| assert-true -message [format "Item %s not equal. Should be: '%s' but is' %s'"  $index [ $ref_list_of_items| get $index] $item_from_menu]
		}
	}
}

proc "compare-menu-for_new-items"{

	get-menu "File/New"|  get-object  | invoke getMenu | invoke getItemCount |int | let [val items_in_menu -input]{
		if [ $items_in_menu | eq 9]{
			compare-items -item_amount 9 -ref_list_of_items [list 
			        "MenuItem {Robot Project}"
					"MenuItem {P&roject...}"
					"MenuItem {|}"
					"MenuItem {Robot Test Suites folder}"
					"MenuItem {Robot Resource file}"
					"MenuItem {Robot Test Suite}"
					"MenuItem {Robot python file}"
					"MenuItem {|}"
					"MenuItem {&Other...	M1+N}"] 
					
		}-else {
			compare-items -item_amount 11 -ref_list_of_items [list 
			        "MenuItem {Robot Project}"
					"MenuItem {P&roject...}"
					"MenuItem {|}"
					"MenuItem {Robot Test Suites folder}"
					"MenuItem {Robot Resource file}"
					"MenuItem {Robot Test Suite}"
					"MenuItem {Robot python file}"
					"MenuItem {|}"
					"MenuItem {E&xample...}"
					"MenuItem {|}"
					"MenuItem {&Other...	M1+N}"]
		}
	}		
}

//this is workaround because RCPPT cannot click In File/New in procedure
get-menu "File/New/Project..." | click
get-window "New Project" | get-button Cancel | click

compare-menu-for_new-items

//create new project
get-menu "File/New/Robot Project" | click
get-window "New Robot project" | get-editbox -after [get-label "Project name:"] | set-text New

//check how wizard looks like
with [get-window "New Robot project"] {
    get-control Any -index 6 | get-property enablement | equals true | verify-true
    get-editbox -after [get-label "Project name:"] | get-property text | equals New | verify-true
    with [get-button "Use default location"] {
        get-property enablement | equals true | verify-true
        get-property selected | equals true | verify-true
    }
    with [get-button "Browse..."] {
        get-property enablement | equals false | verify-true
        get-property selected | equals false | verify-true
    }
    with [get-button Finish] {
        get-property containMenu | equals false | verify-true
        get-property selected | equals false | verify-true
    }
    with [get-button Cancel] {
        get-property enablement | equals true | verify-true
        get-property selected | equals false | verify-true
    }
}
get-window "New Robot project" | get-button Finish | click

//check if in project explorer are 2 items
with [get-view "Project Explorer" | get-tree] {
    get-item New | get-property childCount | equals 2 | verify-true
    get-item New | get-property "getItems().TreeItem[0].getText()" 
        | equals [format "Robot Standard libraries [%s]" $robot_version]
    get-item New | get-property "getItems().TreeItem[1].getText()" | equals "red.xml" | verify-true
}
//check if are all libraries 
get-view "Project Explorer" | get-tree 
    | select [format "New/Robot Standard libraries [%s]" $robot_version] | double-click
wait 3000

if [$robot_version | matches "^Robot Framework 2\.9\.\d .*"] {    
	if [get-by-os -linux "Linux" -win "Windows"| equals "Windows"]{
		with [get-view "Project Explorer" | get-tree] {
		    get-item New | get-property "getItems().TreeItem[0].getItems().TreeItem[0].getText()" | matches "BuiltIn \(\\d+\)" 
		        | verify-true
		    get-item New | get-property "getItems().TreeItem[0].getItems().TreeItem[1].getText()" | matches "Collections \(\\d+\)" 
		        | verify-true
		    get-item New | get-property "getItems().TreeItem[0].getItems().TreeItem[2].getText()" | matches "DateTime \(\\d+\)" 
		        | verify-true
		    get-item New | get-property "getItems().TreeItem[0].getItems().TreeItem[3].getText()" | matches "Dialogs \(\\d+\)" 
		        | verify-true
		    get-item New | get-property "getItems().TreeItem[0].getItems().TreeItem[4].getText()" | matches "Easter \(\\d+\)" 
		        | verify-true
		    get-item New | get-property "getItems().TreeItem[0].getItems().TreeItem[5].getText()" 
		        | matches "OperatingSystem \(\\d+\)" | verify-true
		    get-item New | get-property "getItems().TreeItem[0].getItems().TreeItem[6].getText()" | matches "Process \(\\d+\)" 
		        | verify-true
		    get-item New | get-property "getItems().TreeItem[0].getItems().TreeItem[7].getText()" | matches "Reserved \(\\d+\)" 
		        | verify-true
		    get-item New | get-property "getItems().TreeItem[0].getItems().TreeItem[8].getText()" | matches "Screenshot \(\\d+\)" 
		        | verify-true
		    get-item New | get-property "getItems().TreeItem[0].getItems().TreeItem[9].getText()" | matches "String \(\\d+\)" 
		        | verify-true
		    get-item New | get-property "getItems().TreeItem[0].getItems().TreeItem[10].getText()" | matches "Telnet \(\\d+\)" 
		        | verify-true
		    get-item New | get-property "getItems().TreeItem[0].getItems().TreeItem[11].getText()" | matches "XML \(\\d+\)" 
		        | verify-true
		}
	}-else{
		with [get-view "Project Explorer" | get-tree] {
		    get-item New | get-property "getItems().TreeItem[0].getItems().TreeItem[0].getText()" | matches "BuiltIn \(\\d+\)" 
		        | verify-true
		    get-item New | get-property "getItems().TreeItem[0].getItems().TreeItem[1].getText()" | matches "Collections \(\\d+\)" 
		        | verify-true
		    get-item New | get-property "getItems().TreeItem[0].getItems().TreeItem[2].getText()" | matches "DateTime \(\\d+\)" 
		        | verify-true
		    get-item New | get-property "getItems().TreeItem[0].getItems().TreeItem[3].getText()" | equals "Dialogs (non-accessible)"
		        | verify-true
		    get-item New | get-property "getItems().TreeItem[0].getItems().TreeItem[4].getText()" | matches "Easter \(\\d+\)" 
		        | verify-true
		    get-item New | get-property "getItems().TreeItem[0].getItems().TreeItem[5].getText()" 
		        | matches "OperatingSystem \(\\d+\)" | verify-true
		    get-item New | get-property "getItems().TreeItem[0].getItems().TreeItem[6].getText()" | matches "Process \(\\d+\)" 
		        | verify-true
		    get-item New | get-property "getItems().TreeItem[0].getItems().TreeItem[7].getText()" | matches "Reserved \(\\d+\)" 
		        | verify-true
		    get-item New | get-property "getItems().TreeItem[0].getItems().TreeItem[8].getText()" | matches "Screenshot \(\\d+\)" 
		        | verify-true
		    get-item New | get-property "getItems().TreeItem[0].getItems().TreeItem[9].getText()" | matches "String \(\\d+\)" 
		        | verify-true
		    get-item New | get-property "getItems().TreeItem[0].getItems().TreeItem[10].getText()" | matches "Telnet \(\\d+\)" 
		        | verify-true
		    get-item New | get-property "getItems().TreeItem[0].getItems().TreeItem[11].getText()" | matches "XML \(\\d+\)" 
		        | verify-true
		}
	
	}
}


//----------------------------------------------------------------------------------------------------------------------
//create new normal folder
get-view "Project Explorer" | get-tree | select New | get-menu "New/Folder" | click
with [get-window "New Folder"] {
    with [get-editbox -after [get-label "Folder name:"]] {
        set-text "new_folder"
    }
    get-button Finish | click
}
//check that folder is empty
get-view "Project Explorer" | get-tree | get-item "New/new_folder" | get-property childCount | equals 0 | verify-true


//----------------------------------------------------------------------------------------------------------------------
//create test suite as .robot file
get-view "Project Explorer" | get-tree | select New | get-menu "New/Robot Test Suite" | click

//check if deafult option is selected (.robot)
with [get-window "New Robot Test Suite"| get-control Any -index 2] {
    //robot
    get-property "getChildren().Control[1].getChildren().Control[0].getChildren().Control[1].getSelection()" 
        | equals true | verify-true
    get-property "getChildren().Control[1].getChildren().Control[0].getChildren().Control[1].getText()" 
        | equals "as .robot file" | verify-true
    get-property "getChildren().Control[1].getChildren().Control[0].getChildren().Control[1].isEnabled()" | equals true 
        | verify-true
    //txt    
    get-property "getChildren().Control[1].getChildren().Control[0].getChildren().Control[2].getSelection()" 
        | equals false | verify-true
    get-property "getChildren().Control[1].getChildren().Control[0].getChildren().Control[2].getText()" 
        | equals "as .txt file" | verify-true
    get-property "getChildren().Control[1].getChildren().Control[0].getChildren().Control[2].isEnabled()" | equals true 
        | verify-true
    //tsv    
    get-property "getChildren().Control[1].getChildren().Control[0].getChildren().Control[3].getSelection()" 
        | equals false | verify-true
    get-property "getChildren().Control[1].getChildren().Control[0].getChildren().Control[3].getText()" 
        | equals "as .tsv file" | verify-true
    get-property "getChildren().Control[1].getChildren().Control[0].getChildren().Control[3].getEnabled()" 
        | equals true | verify-true
}



with [get-window "New Robot Test Suite"] {
    get-editbox -after [get-label "File name:"] | set-text "new_suite.robot"
    get-button Finish | click
}

//check if robot suite is open and active
with [get-tab-folder -index 1] {
    get-property "pages[0]" | equals "new_suite.robot" | verify-true
    get-property activePage | equals "new_suite.robot" | verify-true
    get-property tabCount | equals 1 | verify-true
}

//check if it has all pages
with [get-editor "new_suite.robot"] {
    get-text-viewer | get-property text | equals "*** Test Cases ***" | verify-true
    with [get-tab-folder] {
        get-property "pages[0]" | equals "Test Cases" | verify-true
        get-property "pages[1]" | equals Keywords | verify-true
        get-property "pages[2]" | equals Settings | verify-true
        get-property "pages[3]" | equals Variables | verify-true
        get-property "pages[4]" | equals Source | verify-true
        get-property activePage | equals Source | verify-true
        get-property tabCount | equals 5 | verify-true
    }
}

//check outline
with [get-view Outline | get-tree] {
    get-property itemCount | equals 1 | verify-true
    get-property "getItems().TreeItem[0].getText()" | equals "new_suite.robot" | verify-true
}


//-----------------------------------------------------------------------------------------------------------
//Create test suite with .tsv

get-view "Project Explorer" | get-tree | select New | select New | get-menu "New/Robot Test Suite" | click
with [get-window "New Robot Test Suite"] {
    get-editbox -after [get-label "File name:"] | set-text "new_tsv_suite"
    get-button "as .tsv file" | click
    get-button Finish | click
}

//check text and tabs
with [get-editor "new_tsv_suite.tsv"] {
    get-text-viewer | get-property text | equals "*** Test Cases ***" | verify-true
    with [get-tab-folder] {
        get-property "pages[0]" | equals "Test Cases" | verify-true
        get-property "pages[1]" | equals Keywords | verify-true
        get-property "pages[2]" | equals Settings | verify-true
        get-property "pages[3]" | equals Variables | verify-true
        get-property "pages[4]" | equals Source | verify-true
        get-property activePage | equals Source | verify-true
        get-property tabCount | equals 5 | verify-true
    }
}

//Check outline
with [get-view Outline | get-tree] {
    get-item "new_tsv_suite.tsv" | get-property childCount | equals 1 | verify-true
}

//check if robot suite is open and active
with [get-tab-folder -index 1] {
    get-property "pages[0]" | equals "new_suite.robot" | verify-true
    get-property "pages[1]" | equals "new_tsv_suite.tsv" | verify-true
    get-property activePage | equals "new_tsv_suite.tsv" | verify-true
    get-property tabCount | equals 2 | verify-true
}
//-----------------------------------------------------------------------------------------------------------
//Create test suite with .txt

get-view "Project Explorer" | get-tree | select New | select New | get-menu "New/Robot Test Suite" | click
with [get-window "New Robot Test Suite"] {
    get-editbox -after [get-label "File name:"] | set-text "new_txt_suite"
    get-button "as .txt file" | click
    get-button Finish | click
}

//check text and tabs
with [get-editor "new_txt_suite.txt"] {
    get-text-viewer | get-property text | equals "*** Test Cases ***" | verify-true
    with [get-tab-folder] {
        get-property "pages[0]" | equals "Test Cases" | verify-true
        get-property "pages[1]" | equals Keywords | verify-true
        get-property "pages[2]" | equals Settings | verify-true
        get-property "pages[3]" | equals Variables | verify-true
        get-property "pages[4]" | equals Source | verify-true
        get-property activePage | equals Source | verify-true
        get-property tabCount | equals 5 | verify-true
    }
}

//Check outline
with [get-view Outline | get-tree] {
    get-item "new_txt_suite.txt" | get-property childCount | equals 1 | verify-true
}
//check if txt file is open and active
with [get-tab-folder -index 1] {
    get-property "pages[0]" | equals "new_suite.robot" | verify-true
    get-property "pages[1]" | equals "new_tsv_suite.tsv" | verify-true
    get-property "pages[2]" | equals "new_txt_suite.txt" | verify-true
    get-property activePage | equals "new_txt_suite.txt" | verify-true
    get-property tabCount | equals 3 | verify-true
}

//checking layout of red.xml is in other test
get-view "Project Explorer" | get-tree | select "New/red.xml" | double-click
//check how red.xml looks like in text view
with [get-view "Project Explorer" | get-tree] {
    select "New/red.xml" | get-menu "Open With/Text Editor" | click
}
get-tab-folder -index 1 | get-tab-item "red.xml" | click
get-editor "red.xml" | get-text-viewer | get-property text 
    | equals "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n"
    + "<projectConfiguration>\n"
    + "    <configVersion>2</configVersion>\n"
    + "    <relativeTo>WORKSPACE</relativeTo>\n"
    + "    <pythonpath/>\n"
    + "    <classpath/>\n"
    + "    <excludedForValidation/>\n"
    + "    <isValidatedFileSizeCheckingEnabled>true</isValidatedFileSizeCheckingEnabled>\n"
    + "    <validatedFileMaxSize>1024</validatedFileMaxSize>\n"
    + "    <isReferencedLibrariesAutoReloadEnabled>true</isReferencedLibrariesAutoReloadEnabled>\n"
    + "    <isReferencedLibrariesAutoDiscoveringEnabled>true</isReferencedLibrariesAutoDiscoveringEnabled>\n"
    + "    <isLibrariesAutoDiscoveringSummaryWindowEnabled>false</isLibrariesAutoDiscoveringSummaryWindowEnabled>\n"
    + "</projectConfiguration>" | verify-true
//-----------------------------------------------------------------------------------------------------------------------    
//add Robot test suite folder
get-view "Project Explorer" | get-tree | select New | select New | get-menu "New/Robot Test Suites folder" | click

with [get-window "New Robot Test Suites folder" | get-control Any -index 5] {
    get-property "getChildren().Control[1].getSelection()" | equals false | verify-true
    get-property "getChildren().Control[1].getText()" | equals "Create suite initialization file" | verify-true
    
    get-property "getChildren().Control[2].getSelection()" | equals true | verify-true
    get-property "getChildren().Control[2].getText()" | equals "as .robot file" | verify-true
    get-property "getChildren().Control[2].isEnabled()" | equals false | verify-true
    
    get-property "getChildren().Control[3].getSelection()" | equals false | verify-true
    get-property "getChildren().Control[3].getText()" | equals "as .txt file" | verify-true
    get-property "getChildren().Control[3].isEnabled()" | equals false | verify-true
    
    get-property "getChildren().Control[4].getSelection()" | equals false | verify-true
    get-property "getChildren().Control[4].getText()" | equals "as .tsv file" | verify-true
    get-property "getChildren().Control[4].isEnabled()" | equals false | verify-true
}


with [get-window "New Robot Test Suites folder"] {
    with [get-editbox -after [get-label "Folder name:"]] {
        set-text "new_suite_folder"
    }
    get-button Finish | click
}
get-view "Project Explorer" | get-tree | get-item "New/new_suite_folder" | get-property childCount | equals 0 
    | verify-true
 
//-------------------------------------------------------------------------------------------------------------    
//add Robot test suite folder with _init_
get-view "Project Explorer" | get-tree | select New | get-menu "New/Robot Test Suites folder" | click
with [get-window "New Robot Test Suites folder"] {
    with [get-editbox -after [get-label "Folder name:"]] {
        set-text "new_suite_folder_with_init"
    }
    get-button "Create suite initialization file" | check
    get-button Finish | click
}
//check if _init_ exists
with [get-view "Project Explorer" | get-tree] {
    get-item "New/new_suite_folder_with_init" | get-property childCount | equals 1 | verify-true
    get-item "New/new_suite_folder_with_init" | get-property "getItems().TreeItem[0].getText()" 
        | equals "__init__.robot" | verify-true
}
//check if _init_ is empty
get-editor "__init__.robot" | get-text-viewer | get-property text | equals "" | verify-true

with [get-tab-folder -index 1] {
    get-property "pages[0]" | equals "new_suite.robot" | verify-true
    get-property "pages[1]" | equals "new_tsv_suite.tsv" | verify-true
    get-property "pages[2]" | equals "new_txt_suite.txt" | verify-true
    get-property "pages[3]" | equals "New/red.xml" | verify-true
    get-property "pages[4]" | equals "red.xml" | verify-true
    get-property "pages[5]" | equals "__init__.robot" | verify-true
    get-property activePage | equals "__init__.robot" | verify-true
    get-property tabCount | equals 6 | verify-true
}


////-----------------------------------------------------------------------------------------------------------
//add init.tsv
get-view "Project Explorer" | get-tree | select New | get-menu "New/Robot Test Suites folder" | click
with [get-window "New Robot Test Suites folder"] {
    get-button "Create suite initialization file" | check
    get-button "as .tsv file" | click
    wait 500
    with [get-editbox -after [get-label "Folder name:"]] {
        set-text "suite_with_tsv_init"
    }
    get-button Finish | click
}
get-editor "__init__.tsv" | get-text-viewer | get-property text | equals "" | verify-true

//check tab folder
with [get-tab-folder -index 1] {
    get-property "pages[0]" | equals "new_suite.robot" | verify-true
    get-property "pages[1]" | equals "new_tsv_suite.tsv" | verify-true
    get-property "pages[2]" | equals "new_txt_suite.txt" | verify-true
    get-property "pages[3]" | equals "New/red.xml" | verify-true
    get-property "pages[4]" | equals "red.xml" | verify-true
    get-property "pages[5]" | equals "__init__.robot" | verify-true
    get-property "pages[6]" | equals "__init__.tsv" | verify-true
    get-property activePage | equals "__init__.tsv" | verify-true
    get-property tabCount | equals 7 | verify-true
}
//--------------------------------------------------------------------------------------------------------------------------
//add suite folder with .txt init
get-view "Project Explorer" | get-tree | select New | select New | get-menu "New/Robot Test Suites folder" | click
with [get-window "New Robot Test Suites folder"] {
    with [get-editbox -after [get-label "Folder name:"]] {
        set-text "new_txt_suite_fo"
        set-text "new_txt_suite_fol"
        set-text "new_txt_suite_fold"
        set-text "new_txt_suite_folde"
        set-text "new_txt_suite_folder"
    }
    get-button "Create suite initialization file" | check
    get-button "as .txt file" | click
    get-button Finish | click
}
with [get-tab-folder -index 1] {
    get-property "pages[0]" | equals "new_suite.robot" | verify-true
    get-property "pages[1]" | equals "new_tsv_suite.tsv" | verify-true
    get-property "pages[2]" | equals "new_txt_suite.txt" | verify-true
    get-property "pages[3]" | equals "New/red.xml" | verify-true
    get-property "pages[4]" | equals "red.xml" | verify-true
    get-property "pages[5]" | equals "__init__.robot" | verify-true
    get-property "pages[6]" | equals "__init__.tsv" | verify-true
    get-property "pages[7]" | equals "__init__.txt" | verify-true
    get-property activePage | equals "__init__.txt" | verify-true
    get-property tabCount | equals 8 | verify-true
}


//-----------------------------------------------------------------------------------------------------------------------
//add Resource file .robot
get-view "Project Explorer" | get-tree | select New | get-menu "New/Robot Resource file" | click

with [get-window "New Robot Resource file" | get-control Any -index 2] {
    get-property "getChildren().Control[1].getChildren().Control[0].getChildren().length" | equals 5 | verify-true
    //robot
    get-property "getChildren().Control[1].getChildren().Control[0].getChildren().Control[1].getSelection()" 
        | equals true | verify-true
    get-property "getChildren().Control[1].getChildren().Control[0].getChildren().Control[1].getText()" 
        | equals "as .robot file" | verify-true
    get-property "getChildren().Control[1].getChildren().Control[0].getChildren().Control[1].isEnabled()" | equals true 
        | verify-true
    //txt    
    get-property "getChildren().Control[1].getChildren().Control[0].getChildren().Control[2].getSelection()" 
        | equals false | verify-true
    get-property "getChildren().Control[1].getChildren().Control[0].getChildren().Control[2].getText()" 
        | equals "as .txt file" | verify-true
    get-property "getChildren().Control[1].getChildren().Control[0].getChildren().Control[2].isEnabled()" | equals true 
        | verify-true
    //tsv    
    get-property "getChildren().Control[1].getChildren().Control[0].getChildren().Control[3].getSelection()" 
        | equals false | verify-true
    get-property "getChildren().Control[1].getChildren().Control[0].getChildren().Control[3].getText()" 
        | equals "as .tsv file" | verify-true
    get-property "getChildren().Control[1].getChildren().Control[0].getChildren().Control[3].getEnabled()" 
        | equals true | verify-true
}

with [get-window "New Robot Resource file"] {
    with [get-editbox -after [get-label "File name:"]] {
    	wait 1000
        set-text "resource file.robot"
    }
    get-button Finish | click
}
wait 1000
//check tabs
with [get-tab-folder -index 1] {
    get-property "pages[0]" | equals "new_suite.robot" | verify-true
    get-property "pages[1]" | equals "new_tsv_suite.tsv" | verify-true
    get-property "pages[2]" | equals "new_txt_suite.txt" | verify-true
    get-property "pages[3]" | equals "New/red.xml" | verify-true
    get-property "pages[4]" | equals "red.xml" | verify-true
    get-property "pages[5]" | equals "__init__.robot" | verify-true
    get-property "pages[6]" | equals "__init__.tsv" | verify-true
    get-property "pages[7]" | equals "__init__.txt" | verify-true
    get-property "pages[8]" | equals "resource file.robot" | verify-true
    get-property activePage | equals "resource file.robot" | verify-true
    get-property tabCount | equals 9 | verify-true
}
//check tabs in editor
with [get-editor "resource file.robot"] {
    with [get-tab-folder] {
        get-property "pages[0]" | equals Keywords | verify-true
        get-property "pages[1]" | equals Settings | verify-true
        get-property "pages[2]" | equals Variables | verify-true
        get-property "pages[3]" | equals "Source" | verify-true
        get-property activePage | equals "Source" | verify-true
        get-property tabCount | equals 4 | verify-true
    }
    get-text-viewer | get-property text | equals "" | verify-true
}

//-----------------------------------------------------------------------------------------------------
//add resource as .tsv
get-view "Project Explorer" | get-tree | select New | select New | get-menu "New/Robot Resource file" | click

with [get-window "New Robot Resource file"] {
    get-button "as .tsv file" | click
    wait 500
    with [get-editbox -after [get-label "File name:"]] {
        set-text "new_tsv_resource.tsv"
    }
    get-button Finish | click
}

//check tab list
with [get-tab-folder -index 1] {
    get-property "pages[0]" | equals "new_suite.robot" | verify-true
    get-property "pages[1]" | equals "new_tsv_suite.tsv" | verify-true
    get-property "pages[2]" | equals "new_txt_suite.txt" | verify-true
    get-property "pages[3]" | equals "New/red.xml" | verify-true
    get-property "pages[4]" | equals "red.xml" | verify-true
    get-property "pages[5]" | equals "__init__.robot" | verify-true
    get-property "pages[6]" | equals "__init__.tsv" | verify-true
    get-property "pages[7]" | equals "__init__.txt" | verify-true
    get-property "pages[8]" | equals "resource file.robot" | verify-true
    get-property "pages[9]" | equals "new_tsv_resource.tsv" | verify-true
    get-property activePage | equals "new_tsv_resource.tsv" | verify-true
    get-property tabCount | equals 10 | verify-true
}

//-----------------------------------------------------------------------------------------------------
//add resource as .txt
get-view "Project Explorer" | get-tree | select New | select New | get-menu "New/Robot Resource file" | click

with [get-window "New Robot Resource file"] {
    get-button "as .txt file" | click
    wait 500
    with [get-editbox -after [get-label "File name:"]] {
        set-text "new_txt_resource.txt"
    }
    get-button Finish | click
}

//check tab list
with [get-tab-folder -index 1] {
    get-property "pages[0]" | equals "new_suite.robot" | verify-true
    get-property "pages[1]" | equals "new_tsv_suite.tsv" | verify-true
    get-property "pages[2]" | equals "new_txt_suite.txt" | verify-true
    get-property "pages[3]" | equals "New/red.xml" | verify-true
    get-property "pages[4]" | equals "red.xml" | verify-true
    get-property "pages[5]" | equals "__init__.robot" | verify-true
    get-property "pages[6]" | equals "__init__.tsv" | verify-true
    get-property "pages[7]" | equals "__init__.txt" | verify-true
    get-property "pages[8]" | equals "resource file.robot" | verify-true
    get-property "pages[9]" | equals "new_tsv_resource.tsv" | verify-true
    get-property "pages[10]" | equals "new_txt_resource.txt" | verify-true
    get-property activePage | equals "new_txt_resource.txt" | verify-true
    get-property tabCount | equals 11 | verify-true
}

get-view "Project Explorer" | get-tree | select New | key-type F5
wait 1000

------=_.content-0a7243a0-75d3-3d5f-9791-539de0e5b7ac--
