--- RCPTT testcase ---
Format-Version: 1.0
Context-Type: org.eclipse.rcptt.ctx.ecl
Element-Name: TestCaseAndKeywordsProcedures
Element-Type: context
Element-Version: 2.0
Id: _VzYJ0KEAEea9Cvae3yWo1A
Runtime-Version: 2.2.0.201706152316
Save-Time: 6/27/18 9:56 AM

------=_.ecl.context-718f04b4-ed39-33e3-af62-0995e4561998
Content-Type: text/ecl
Entry-Name: .ecl.context

proc "my-assert-true" [val result -input] [val expected] [val col] [val row] {	
	$result | eq $expected | assert-true -message [format "Value in row %s, column %s should be: '%s', but is '%s'" $row $col $expected $result]
}


//HINT: do not use hexstring in comments! As parameter in procedure they are converted to decimal value

//rows starts from 1
proc "check-test_case-row" [val file] [val row] [val tc ""] [val c1 ""] [val c2 ""] [val c3 ""] [val c4 ""] [val c5 ""]  [val c6 ""] [val extended_col false]
{	
	if [$extended_col | eq false]{
		get-editor $file | get-canvas -after [get-label "Test Cases"] -index 1 | get-property "getLayer().getBodyLayer().getColumnCount()"  -raw | int | eq 6 | verify-true
	}-else{
		get-editor $file | get-canvas -after [get-label "Test Cases"] -index 1 | get-property "getLayer().getBodyLayer().getColumnCount()"  -raw | int | eq 7 | verify-true
	}
		
	get-editor $file | get-canvas -after [get-label "Test Cases"] -index 1 | get-object | invoke getCellByPosition 1 $row|  invoke getDataValue 
		| my-assert-true -expected $tc -row $row -col 1 
	get-editor $file | get-canvas -after [get-label "Test Cases"] -index 1  | get-object | invoke getCellByPosition 2 $row|  invoke getDataValue 
	    | my-assert-true -expected $c1 -row $row -col 2
	get-editor $file | get-canvas -after [get-label "Test Cases"] -index 1  | get-object | invoke getCellByPosition 3 $row|  invoke getDataValue 
	    | my-assert-true -expected $c2 -row $row -col 3 
	get-editor $file | get-canvas -after [get-label "Test Cases"] -index 1  | get-object | invoke getCellByPosition 4 $row|  invoke getDataValue 
	    | my-assert-true -expected $c3 -row $row -col 4 
	get-editor $file | get-canvas -after [get-label "Test Cases"] -index 1  | get-object | invoke getCellByPosition 5 $row|  invoke getDataValue 
	    | my-assert-true -expected $c4 -row $row -col 5     
	get-editor $file | get-canvas -after [get-label "Test Cases"] -index 1  | get-object | invoke getCellByPosition 6 $row|  invoke getDataValue 
	    | my-assert-true -expected $c5 -row $row -col 6 
	    
	if [$extended_col | not-eq false]{
		get-editor $file | get-canvas -after [get-label "Test Cases"] -index 1  | get-object | invoke getCellByPosition 7 $row|  invoke getDataValue 
	    	| my-assert-true -expected $c6 -row $row -col 7
	}
	
}

//rows starts from 1
proc "check-keyword-row" [val file] [val row] [val kw ""] [val c1 ""] [val c2 ""] [val c3 "" ] [val c4 "" ] [val c5 "" ] [val c6 "" ] [val extended_col false]
{
	if [$extended_col | eq false]{
		get-editor $file | get-canvas -after [get-label "User Keywords"] -index 1 | get-property "getLayer().getBodyLayer().getColumnCount()"  -raw | int | eq 6 | verify-true
	}-else{
		get-editor $file | get-canvas -after [get-label "User Keywords"] -index 1 | get-property "getLayer().getBodyLayer().getColumnCount()"  -raw | int | eq 7 | verify-true
	}
	get-editor $file | get-canvas -after [get-label "User Keywords"] -index 1 | get-object | invoke getCellByPosition 1 $row|  invoke getDataValue 
		| my-assert-true -expected $kw -row $row -col 1 
	get-editor $file | get-canvas -after [get-label "User Keywords"] -index 1  | get-object | invoke getCellByPosition 2 $row|  invoke getDataValue 
	    | my-assert-true -expected $c1 -row $row -col 2
	get-editor $file | get-canvas -after [get-label "User Keywords"] -index 1  | get-object | invoke getCellByPosition 3 $row|  invoke getDataValue 
	    | my-assert-true -expected $c2 -row $row -col 3 
	get-editor $file | get-canvas -after [get-label "User Keywords"] -index 1  | get-object | invoke getCellByPosition 4 $row|  invoke getDataValue 
	    | my-assert-true -expected $c3 -row $row -col 4 
	get-editor $file | get-canvas -after [get-label "User Keywords"] -index 1  | get-object | invoke getCellByPosition 5 $row|  invoke getDataValue 
	    | my-assert-true -expected $c4 -row $row -col 5     
	get-editor $file | get-canvas -after [get-label "User Keywords"] -index 1  | get-object | invoke getCellByPosition 6 $row|  invoke getDataValue 
	    | my-assert-true -expected $c5 -row $row -col 6
	if [$extended_col | not-eq false]{
		get-editor $file | get-canvas -after [get-label "User Keywords"] -index 1  | get-object | invoke getCellByPosition 7 $row|  invoke getDataValue 
	    	| my-assert-true -expected $c6 -row $row -col 7
	}     
}

proc "compare-markers-list-with-ref" [val markers -input] [val ref_markers] [val type]{

	$ref_markers |each [val el] [val index]{
			$el | eq [$markers | get $index] | equals true | assert-true -message [format "In line %s should be marker %s but was in line: %s." $el $type [$markers | get $index]]
	}
}

proc "set-list-with-markers-and-comapare"  [val file] [val table] [val ref_list] [val type "ERROR"] {
	get-editor  $file| get-canvas -after [get-label $table] -index 1 
	    | get-property "getLayer().getBodyLayer().getRowCount()" -raw | int | let [val row_count -input]{
	    
			repeat [val row] -times $row_count -command{
				if [get-editor $file | get-canvas -after [get-label $table] -index 1  | get-object 
					    | invoke getLayer| invoke getConfigLabelsByPosition 0 $row|  invoke getLabels  |invoke contains $type | eq true]{
					   		echo $row
				}
					    
			} | to-list | compare-markers-list-with-ref  -ref_markers $ref_list -type $type
		
		}
}

proc "compare-row-with-list" [val file] [val table] [val row] [val ref_table]
{	
	get-editor $file | get-canvas -after [get-label $table] -index 1 | get-property "getLayer().getBodyLayer().getColumnCount()"  -raw | int | let [val col_amount -input]{
		$ref_table | invoke getElements  | invoke size | eq $col_amount | assert-true -message [format "Column size is: %s and is different then list size"  $col_amount]
	
		repeat [val index] -times $col_amount -command{
			$ref_table | get $index| let [val ref_value -input]{
				get-editor $file | get-canvas -after [get-label $table] -index 1 | get-object | invoke getCellByPosition [plus $index 1] $row | invoke getDataValue 
				     |  my-assert-true -expected  $ref_value -row $row -col [plus $index 1]
			} 
		}
	}
}

//--------------------------- this is to generate list instead doing it manually --------------------------------------------------------------
proc "generate-list" [val file] [val table] [val col_amount] [val row_amount]
{	concat [
	repeat [val index1] -times $row_amount -command{	
	concat "compare-row-with-list -file \"" $file "\" -table \"" $table "\" -col_amount " $col_amount" -row " $index1  " -ref_table [list "[
		repeat [val index2] -times $col_amount -command{		
				concat "\""  [get-editor $file | get-canvas -after [get-label $table] -index 1 | get-object | invoke getCellByPosition [plus $index2 1] $index1 | invoke getDataValue ] "\" "
		} ] "]" "\n"
	} ]
}
//generate-list -file "kw.robot" -table "User Keywords" -col_amount 6  -row_amount 15 | log


proc "generate-list2" [val file] [val table] [val col_amount] [val row_amount]{	
	get-editor $file | get-canvas -after [get-label $table] -index 1 | get-property "getLayer().getBodyLayer().getColumnCount()"  -raw | int | let [val col_amount -input]{
		get-editor $file | get-canvas -after [get-label $table] -index 1 |get-property "getLayer().getBodyLayer().getRowCount()" -raw | int | let [val row_amount -input]{
			concat [
				repeat [val index1] -times $row_amount -command{	
				concat "compare-row-with-list -file \"" $file "\" -table \"" $table "\" -col_amount " $col_amount" -row " $index1  " -ref_table [list "[
					repeat [val index2] -times $col_amount -command{		
							concat "\""  [get-editor $file | get-canvas -after [get-label $table] -index 1 | get-object | invoke getCellByPosition [plus $index2 1] $index1 | invoke getDataValue ] "\" "
					} ] "]" "\n"
				} ]
		 }		
	}
}

//generate-list2 -file "TestFile.robot" -table "User Keywords"| log




//rows starts from 0
//tables: "User Keywords" and "Test Cases"
proc "is-row-fully-selected" [val row] [val table] [val file_name "TestFile.robot"] [val index 0]{
	get-editor $file_name -index $index| get-canvas -after [get-label $table] -index 1  | get-object | invoke getLayer | invoke getBodyLayer | invoke getScrollableLayer
			| invoke getUnderlyingLayerByPosition 0 0 | invoke isRowPositionFullySelected  $row | eq true | verify-true
	
	get-editor $file_name -index $index| get-canvas -after [get-label $table] -index 1  | get-object | invoke getLayer | invoke getBodyLayer | invoke getScrollableLayer
			| invoke getUnderlyingLayerByPosition 0 0 | invoke hasRowSelection | eq true | verify-true
					
	//check if only one row is selected				
	get-editor $file_name -index $index | get-canvas -after [get-label $table] -index 1  | get-object | invoke getLayer | invoke getBodyLayer | invoke getScrollableLayer
		| invoke getUnderlyingLayerByPosition 0 0 | invoke getSelectedRowCount | eq 1 | verify-true
} 

//rows and cols starts from 0
//tables: "User Keywords" and "Test Cases"
proc "is-cell-selected" [val row] [val col] [val table] [val file_name "TestFile.robot"]{
	get-editor $file_name | get-canvas -after [get-label $table] -index 1  | get-object | invoke getLayer | invoke getBodyLayer | invoke getScrollableLayer
			| invoke getUnderlyingLayerByPosition 0 0 | invoke isCellPositionSelected $col $row | eq true |  assert-true -message [format "Cell in row %s and col %s is not selected" $row $col]
			
	get-editor $file_name | get-canvas -after [get-label $table] -index 1  | get-object | invoke getLayer | invoke getBodyLayer | invoke getScrollableLayer
			| invoke getUnderlyingLayerByPosition 0 0 | invoke isRowPositionFullySelected $row | eq false |   assert-true -message  [format "Row %s is fully selected, but should not!" $row ]	
}
------=_.ecl.context-718f04b4-ed39-33e3-af62-0995e4561998--
