--- RCPTT testcase ---
Format-Version: 1.0
Element-Name: DefaultErrorsAndWarnings
Element-Type: testcase
Element-Version: 3.0
External-Reference: 
Id: _VMj88KTbEeazyPh6f3_hNQ
Runtime-Version: 2.2.0.201706152316
Save-Time: 6/12/18 2:50 PM
Testcase-Type: ecl

------=_.content-0a7243a0-75d3-3d5f-9791-539de0e5b7ac
Content-Type: text/ecl
Entry-Name: .content

proc "check-combobox-list-and-selection" [val section ""]  [val label ""] [val selected "Warning"] [val text ""]{
	if [$selected | eq "Fatal"]{
		with [get-window Preferences | get-section $section] {
		    with [get-combo -after [get-label $label]] {
		        get-property "values[0]" | equals Fatal | verify-true
		        get-property "values[1]" | equals Error | verify-true
		        get-property "values[2]" | equals Warning | verify-true
		        get-property "values[3]" | equals Info | verify-true
		        get-property "values[4]" | equals Ignore | verify-true
		    }
		}
	}-else{
		with [get-window Preferences | get-section $section] {
		    with [get-combo -after [get-label $label]] {
		        get-property "values[0]" | equals Error | verify-true
		        get-property "values[1]" | equals Warning | verify-true
		        get-property "values[2]" | equals Info | verify-true
		        get-property "values[3]" | equals Ignore | verify-true
		    }
		}
	}	
	with [get-window Preferences | get-section $section] {	    
		get-combo -after [get-label $label] | get-property selection | equals $selected | verify-true
	}
	
	get-window Preferences | get-section $section | get-label $label
    	| get-property "getToolTipText()" 
    	| equals $text | verify-true
}

get-preferences-menu | click
get-window Preferences | get-tree | select "Robot Framework/Errors\\/Warnings"

with [get-window Preferences] {
    with [get-control Any -after [get-label "Errors/Warnings"] -index 9] {
    	////check elements
        get-property "getChildren().length" | equals 3 | verify-true
        get-property "getChildren().Control[0].getText()" | equals "RED validation settings" | verify-true
        get-property "getChildren().Control[1].getChildren().length" | equals 2 | verify-true
        //validation
        get-property "getChildren().Control[1].getChildren().Control[0].getText()" | equals Validation | verify-true
        get-property "getChildren().Control[1].getChildren().Control[0].getChildren().length" | equals 2 | verify-true
        get-property "getChildren().Control[1].getChildren().Control[0].getChildren().Control[0].getText()" 
            | equals "Turn off validation (Not recommended)" | verify-true
        //runtime and building    
        get-property "getChildren().Control[1].getChildren().Control[1].getText()" | equals "Runtime and Building" 
            | verify-true
    }
    
    //check groups
    with [get-group Validation] {
        get-property className | equals "org.eclipse.swt.widgets.Group" | verify-true
        get-property "getText()" | equals Validation | verify-true
        get-property "getChildren().length" | equals 2 | verify-true
        get-property "getChildren().Control[0].getSelection()" | equals false | verify-true
        get-property "getChildren().Control[0].getText()" | equals "Turn off validation (Not recommended)" | verify-true
        get-property "getChildren().Control[0].getToolTipText()" 
            | equals "This is strongly recommended to NOT turn off the whole validation.\n"
            + "Use this option ONLY if you understand possible consequences.\n"
            + "Validation is responsible for providing markers, mostly errors and warnings for possibly problematic code.\n"
            + "It can be triggered during code typing, manual project building, file saving (autobuilding), revalidation and by some other tools." 
            | verify-true
            
        //all errors types    
        get-property "getChildren().Control[1].getChildren().Control[0].getChildren().length" | equals 5 | verify-true
        get-property "getChildren().Control[1].getChildren().Control[0].getChildren().Control[0].getText()" 
            | equals "Code style" | verify-true
        get-property "getChildren().Control[1].getChildren().Control[0].getChildren().Control[1].getText()" 
            | equals "Name shadowing and conflicts" | verify-true
        get-property "getChildren().Control[1].getChildren().Control[0].getChildren().Control[2].getText()" 
            | equals "Unnecessary code" | verify-true
        get-property "getChildren().Control[1].getChildren().Control[0].getChildren().Control[3].getText()" 
            | equals Import | verify-true
        get-property "getChildren().Control[1].getChildren().Control[0].getChildren().Control[4].getText()" 
            | equals "Robot version" | verify-true
    }
    //second group
    with [get-group "Runtime and Building"] {
        get-property caption | equals "Runtime and Building" | verify-true
        get-property "getText()" | equals "Runtime and Building" | verify-true
        get-property "getChildren().Control[0].getChildren().Control[0].getChildren().length" | equals 2 | verify-true
        get-property "getChildren().Control[0].getChildren().Control[0].getChildren().Control[0].getText()" 
            | equals Runtime | verify-true
        get-property "getChildren().Control[0].getChildren().Control[0].getChildren().Control[1].getText()" 
            | equals "Project configuration" | verify-true
    }
}
//check if are not expanded
with [get-window Preferences | get-group Validation] {
    get-section "Code style" | get-link | get-property "isExpanded()" | equals false | verify-true
    get-section "Name shadowing and conflicts" | get-link | get-property "isExpanded()" | equals false | verify-true
    get-section "Unnecessary code" | get-link | get-property "isExpanded()" | equals false | verify-true
    get-section Import | get-link | get-property "isExpanded()" | equals false | verify-true
    get-section "Robot version" | get-link | get-property "isExpanded()" | equals false | verify-true
}
    
with [get-window Preferences | get-group "Runtime and Building"] {    
    get-section Runtime | get-link | get-property "isExpanded()" | equals false | verify-true
    get-section "Project configuration" | get-link | get-property "isExpanded()" | equals false | verify-true
}


//====================================== Code style ==============================================

get-window Preferences | get-group Validation | get-section "Code style" | click

check-combobox-list-and-selection -section "Code style" -label "Keyword from nested library" -text  "Occurs when keyword imported by dependency is used in test suite." 

check-combobox-list-and-selection -section "Code style" -label "Keyword occurrence not consistent with definition"
	 -text  "Occurs when name in keyword call is different than in definition. Use name the same as in definition."

check-combobox-list-and-selection -section "Code style" -label "Keyword name with dots"
	-text "Occurs when keyword name contains dots. It may be confused with fully qualified name." 

check-combobox-list-and-selection -section "Code style" -label "Variable given as keyword name"
	 -text  "Occurs when variable is used as keyword call in test suite setup or teardown." 

check-combobox-list-and-selection -section "Code style" -label  "Collection size should be equal to keyword arguments number" 
	  -text "Occurs when collection variable is used in keyword call and collection elements number is different than keyword arguments number."

check-combobox-list-and-selection -section "Code style" -label "Invalid time format"
	 -text "Occurs when time is not formatted correctly. Use number, time string or timer string." 


//====================================== Name shadowing and conflict =============================

with [get-window Preferences| get-group Validation] {
    get-section "Code style" | click
    get-section "Name shadowing and conflicts" | click
}

get-window Preferences | get-group Validation| get-section "Name shadowing and conflicts" | get-control Any -index 2 | get-property "getChildren().length" | equals 6 | verify-true

check-combobox-list-and-selection -section "Name shadowing and conflicts" -label "Duplicated variable name"
	 -text "Occurs when variable name is duplicated and one variable value overrides another." 

check-combobox-list-and-selection -section "Name shadowing and conflicts" -label "Duplicated test case name" 
	 -text "Occurs when test case name is duplicated and both test cases can be run."  

check-combobox-list-and-selection -section "Name shadowing and conflicts" -label "Masked keyword name"
	-text "Occurs when keyword defined in test suite has the same name like keyword from imported library.\n"
            + "You can use fully qualified name when calling masked keyword." 


//====================================== Unnecessary code =============================

with [get-window Preferences| get-group Validation] {
    get-section "Unnecessary code" | click
    get-section "Name shadowing and conflicts" | click
}

get-window Preferences | get-section "Unnecessary code" | get-control Any -index 2 | get-property "getChildren().length" | equals 10 | verify-true

check-combobox-list-and-selection -section "Unnecessary code" -label "Empty settings definition"
	-text "Occurs when suite, test case or keyword setting is defined with empty content." 

check-combobox-list-and-selection -section "Unnecessary code" -label "Unrecognized header type" 
	-text "Occurs when Robot Framework does not recognize section header.\n"
            + "Only ***Settings***, ***Variables***, ***Test Cases*** or ***Keywords*** sections are valid."

check-combobox-list-and-selection -section "Unnecessary code" -label "Duplicated configuration path"
	-text "Occurs when path defined in configuration is subpath of different one. Such path is skipped." 

check-combobox-list-and-selection -section "Unnecessary code" -label "Missing configuration path"
	-text "Occurs when missing path is defined in configuration. Such path is skipped." 

check-combobox-list-and-selection -section "Unnecessary code" -label "Overridden named argument"
	-text "Occurs when named argument is passed to keyword multiple times."

//====================================== Import  =============================

with [get-window Preferences | get-group Validation] {
    get-section "Unnecessary code" | click
    get-section Import | click
}

get-window Preferences | get-section "Import" | get-control Any -index 2 | get-property "getChildren().length" | equals 10 | verify-true

check-combobox-list-and-selection -section "Import" -label "Absolute path used"
  	-text "Occurs when absolute path is used. Workspace-relative paths are preferred in RED." 
  	
check-combobox-list-and-selection -section "Import" -label "Unsupported resource import used"
  	-text  "Occurs when imported file is in HTML format or is outside of workspace.\n"
        + "Red will not parse such files, so keywords and variables defined inside will not be accessible.\n"
        + "Use supported formats from workspace only."
  	
check-combobox-list-and-selection -section "Import" -label "Import path relative via modules path"
  	-text  "Occurs when imported path is relative to python path." 
  	
check-combobox-list-and-selection -section "Import" -label "Import path outside of workspace"
  	-text  "Occurs when imported path points to location not from workspace." 

check-combobox-list-and-selection -section "Import" -label "Import Remote library without arguments" 
  	-text  "Occurs when Remote library is imported without agruments." 	  	
//====================================== Robot version  =============================  		

with [get-window Preferences | get-group Validation] {
    get-section Import | click
    get-section "Robot version" | click
}  	
get-window Preferences | get-section "Robot version" | get-control Any -index 2 | get-property "getChildren().length" | equals 10 | verify-true
check-combobox-list-and-selection -section "Robot version" -label "Removed Robot Framework API used"
  	-text "Occurs when syntax from older Robot Framework version is not available in current version."  -selected "Error"
  	
check-combobox-list-and-selection -section "Robot version" -label "Unsupported Robot Framework API used"
  	-text "Occurs when syntax from newer Robot Framework version is not available in older version."  -selected "Error"  	 

check-combobox-list-and-selection -section "Robot version" -label "Deprecated Robot Framework API used"
  	-text  "Occurs when deprecated syntax is used. Use current Robot Framework syntax instead." 
  	 	
check-combobox-list-and-selection -section "Robot version" -label "Duplicated definitions used"
  	-text "Occurs when testcase or keywords definitions names are not unique." 
  
check-combobox-list-and-selection -section "Robot version" -label "Incorrect variable initialization"
  	-text "Occurs when there is syntax error in variable initialization." 
  	

//====================================== Runtime  =============================  
get-window Preferences | get-group "Runtime and Building" | get-section Runtime | click
   	
check-combobox-list-and-selection -section "Runtime" -label "RED parser warning" 
  	-text "Occurs when for some reason RED parser reports warning." 

check-combobox-list-and-selection -section "Runtime" -label "Robot Framework runtime error"  -selected "Error"
  	-text "Occurs when incorrect Robot Framework syntax is issued. Such syntax will fail test in runtime."

//====================================== "Project configuration"  =============================  

get-window Preferences | get-group "Runtime and Building" | get-section "Project configuration" | click

check-combobox-list-and-selection -section "Project configuration" -label "Project configuration file (red.xml) cannot be read"  -selected "Fatal"
  	-text "Occurs when project has no red.xml configuration file or it cannot be read.\n"
        + "Either there is a problem accessing the file or its structure is broken."

check-combobox-list-and-selection -section "Project configuration" -label "Python Robot Framework environment missing" -selected "Fatal" 
  	-text "Occurs when there is no Robot Environment defined.\n"
    + "Python main directory with Robot modules installed should be defined in preferences.\n"
    + "Project may override this setting in its configuration file."
  	
check-combobox-list-and-selection -section "Project configuration" -label "Library documentation file cannot be generated" -selected "Error"
  	-text "Occurs when for some reason Robot framework is unable to generate library specification file, probably due to missing library dependencies or errors in library source code." 

  	  	
//expand few nad check scroll

with [get-window Preferences | get-group Validation] {
    get-section "Robot version" | click
    get-section "Name shadowing and conflicts" | click
    get-section "Unnecessary code" | click
}
with [get-window Preferences | get-group Validation] {
    get-property "getChildren().Control[1].getVerticalBar().getVisible()" | equals true | verify-true
    get-property "getChildren().Control[1].getHorizontalBar().isVisible()" | equals false | verify-true
}
get-window Preferences | get-button $Apply_and_OK_in_preference | click  	
  	  	
------=_.content-0a7243a0-75d3-3d5f-9791-539de0e5b7ac--
